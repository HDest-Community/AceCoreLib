extend class AceCore
{
	static clearscope double, double GetSectorSize(Sector sec)
	{
		double secSize = 0;
		for (int i = 0; i < sec.lines.Size(); ++i)
		{
			Line ln = sec.lines[i];
			secSize += ln.delta.length();
		}
		return secSize, secSize / sec.lines.Size();
	}

	static clearscope double PitchTo(Actor a, Actor b, int type = 0)
	{
		vector3 diff = level.Vec3Diff(a.pos, b.pos);
		double pitch = atan2(diff.z, diff.xy.length());
		switch (type)
		{
			default: return pitch; // [Ace] This works. No idea about the rest. It seems to work, but...
			case 1: return pitch + a.pitch;
			case 2: return abs(pitch + a.pitch);
		}
	}

	static clearscope double GetPlanePitch(Sector sec, SecPlane plane)
	{
		vector3 lowestPos = (0, 0, int.max);
		vector3 highestPos = (0, 0, int.min);

		for (int i = 0; i < sec.lines.Size(); ++i)
		{
			double z = plane.ZAtPoint(sec.lines[i].v1.p);
			if (z < lowestPos.z) { lowestPos = (sec.lines[i].v1.p, z); }
			if (z > highestPos.z) { highestPos = (sec.lines[i].v1.p, z); }

			z = plane.ZAtPoint(sec.lines[i].v2.p);
			if (z < lowestPos.z) { lowestPos = (sec.lines[i].v2.p, z); }
			if (z > highestPos.z) { highestPos = (sec.lines[i].v2.p, z); }
		}

		vector3 diff = level.Vec3Diff(lowestPos, highestPos);
		return atan2(diff.z, diff.xy.length());
	}

	static bool IsSkyAbove(Actor a)
	{
		FLineTraceData data;
		a.LineTrace(0, a.ceilingz - a.floorz + 64, -90, flags: TRF_NOSKY | TRF_THRUACTORS, data: data);
		return data.HitType == data.TRACE_HitNone;
	}

	static clearscope bool CheckForItem(Actor other, Name item, int amt = 1)
	{
		class<HDWeapon> cls = item;
		return cls && other && other.CountInv(cls) >= amt;
	}
}